import sys
from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
import pandas as pd
from bs4 import BeautifulSoup

sys.path.append('C:\Program Files (x86)\Google\Chrome\Application')
browser = webdriver.Chrome()
browser.get('https://nrlm.gov.in/BlockWiseSHGMemebrsAction.do?methodName=showShgMembers&encd=0')

state = browser.find_element_by_id('stateCodeId')
state.send_keys("ODISHA")


# Function to get the table using Pandas - returns DataFrame object
# More efficient than get_page() defined above
def get_page_new():
    source = BeautifulSoup(browser.page_source, 'lxml')  # create BeautifulSoup object using browser source
    table = source.find_all('table')  # BeautifulSoup grabs the table object
    df = pd.read_html(str(table))  # assign table object to dataframe
    return df


def select_block(b):
    block = Select(browser.find_element_by_id('blockCodeId'))
    block.select_by_visible_text(b)
    p_list = []
    for i in range(2, 999):
        try:
            p_name = browser.find_element_by_xpath(
                "/html/body/div[4]/form/div[1]/li/div[2]/div[1]/div/select/option[" + str(i) + "]")
            p_list.append(p_name.text)
        except Exception:
            break
    return p_list


def select_panchayat(p):
    panchayat = Select(browser.find_element_by_id('grampanchayatCodeId'))
    panchayat.select_by_visible_text(p)


def select_village():
    village = Select(browser.find_element_by_id('villageCodeId'))
    village.select_by_visible_text("All")


def submit_request():
    # navigate to submit button
    elem = browser.find_element_by_id("villageCodeId")
    elem.send_keys(Keys.TAB)
    # submit request on page
    submit = browser.switch_to.active_element
    submit.send_keys(Keys.ENTER)
    # select 100 entries to show per page - maximum
    show = (Select(browser.find_element_by_name("example_length"))).select_by_index(3)


def click_next():
    next = browser.find_element_by_id("example_next")
    next.send_keys(Keys.ENTER)


def get_district_data(name_of_district):
    districtSHG = pd.DataFrame()
    district = Select(browser.find_element_by_id('districtCodeId'))
    district.select_by_visible_text(name_of_district)

    b_list = []
    for i in range(2, 999):
        try:
            b_name = browser.find_element_by_xpath(
                "/html/body/div[4]/form/div/li/div[1]/div[3]/div/select/option[" + str(i) + "]")
            b_list.append(b_name.text)
        except Exception:
            break

    for b in b_list:
        p_list = select_block(b)
        blockSHG = pd.DataFrame()
        for p in p_list:
            select_panchayat(p)
            panchayatSHG = pd.DataFrame()
            select_village()
            submit_request()
            # extract all pages of Panchayat
            for page_num in range(1, 9999):
                print("Getting data of Block " + str(b) + " | Panchayat " + str(p) + "...")
                page_table = get_page_new()
                panchayatSHG = panchayatSHG.append(page_table, ignore_index=1)
                next = browser.find_element_by_id("example_next")
                if next.get_attribute("class") == "paginate_button next":
                    click_next()
                else:
                    print("Getting data of Block " + str(b) + " | Panchayat " + str(p) + " complete.")
                    break
            print(panchayatSHG)
            blockSHG = blockSHG.append(panchayatSHG)
        # blockSHG.to_csv("Block_SHG_"+str(b)+"data.csv")
        districtSHG = districtSHG.append(blockSHG)
    districtSHG.to_csv(name_of_district + "DistrictSHGData.csv")
    districtSHG.to_excel(name_of_district + "DistrictSHGData.xlsx")


district_list = ["GANJAM"]

for d in district_list:
    print(d)
    name = str(d)
    print("Getting Data for District " + name)
    get_district_data(name)
    print("Data Extraction of District "+name+" complete.")
